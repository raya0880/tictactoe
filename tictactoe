import tkinter as tk
from tkinter import messagebox
import requests

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Крестики-нолики")
        self.root.geometry("420x750")
        self.root.resizable(False, False)
        self.root.configure(bg="#2c3e50")

        self.score_X = 0
        self.score_O = 0
        self.current_player = "X"
        self.board = [""] * 9
        self.buttons = []

        self.create_widgets()

    def create_widgets(self):
        title_label = tk.Label(
            self.root,
            text="Крестики-нолики",
            font=("Helvetica", 24, "bold"),
            fg="#ecf0f1",
            bg="#2c3e50"
        )
        title_label.pack(pady=(20, 10))

        score_frame = tk.Frame(self.root, bg="#2c3e50")
        score_frame.pack(pady=10)

        self.label_score_x = tk.Label(
            score_frame,
            text=f"X: {self.score_X}",
            font=("Helvetica", 18, "bold"),
            fg="#e74c3c",
            bg="#2c3e50"
        )
        self.label_score_x.pack(side="left", padx=30)

        self.label_score_o = tk.Label(
            score_frame,
            text=f"O: {self.score_O}",
            font=("Helvetica", 18, "bold"),
            fg="#3498db",
            bg="#2c3e50"
        )
        self.label_score_o.pack(side="right", padx=30)

        board_frame = tk.Frame(self.root, bg="#34495e", padx=15, pady=15)
        board_frame.pack(pady=15)

        for i in range(9):
            btn = tk.Button(
                board_frame,
                text="",
                font=("Helvetica", 28, "bold"),
                width=4,
                height=2,
                relief="flat",
                bg="#ecf0f1",
                activebackground="#bdc3c7",
                command=lambda i=i: self.on_click(i)
            )
            btn.grid(row=i//3, column=i%3, padx=8, pady=8)
            self.buttons.append(btn)

        reset_btn = tk.Button(
            self.root,
            text="Сбросить счёт",
            font=("Helvetica", 14, "bold"),
            bg="#e67e22",
            fg="white",
            relief="flat",
            padx=20,
            pady=8,
            command=self.reset_score
        )
        reset_btn.pack(pady=(10, 10))

        upload_btn = tk.Button(
            self.root,
            text="Отправить в облако (API)",
            font=("Helvetica", 12, "bold"),
            bg="#2ecc71",
            fg="white",
            command=self.upload_score
        )
        upload_btn.pack(pady=5)

    def on_click(self, index):
        if self.board[index] == "" and not self.check_winner():
            self.board[index] = self.current_player
            color = "#e74c3c" if self.current_player == "X" else "#3498db"
            self.buttons[index].config(text=self.current_player, fg=color)

            if self.check_winner():
                if self.current_player == "X":
                    self.score_X += 1
                else:
                    self.score_O += 1
                self.update_score()
                messagebox.showinfo("Победа!", f"Игрок {self.current_player} победил!")
                self.reset_board()
            elif "" not in self.board:
                messagebox.showinfo("Ничья!", "Дружеская ничья!")
                self.reset_board()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"

    def check_winner(self):
        wins = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]
        for a,b,c in wins:
            if self.board[a] == self.board[b] == self.board[c] != "":
                return True
        return False

    def update_score(self):
        self.label_score_x.config(text=f"X: {self.score_X}")
        self.label_score_o.config(text=f"O: {self.score_O}")

    def reset_board(self):
        self.board = [""] * 9
        for btn in self.buttons:
            btn.config(text="", fg="black")
        self.current_player = "X"

    def reset_score(self):
        self.score_X = 0
        self.score_O = 0
        self.update_score()
        self.reset_board()

    def upload_score(self):
        try:
            data = {"player_x_wins": self.score_X, "player_o_wins": self.score_O}
            response = requests.post("http://localhost:5000/api/score", json=data, timeout=3)
            if response.status_code == 201:
                messagebox.showinfo("Успех", "Счёт отправлен в облако!")
            else:
                messagebox.showerror("Ошибка", f"Сервер вернул ошибку: {response.status_code}")
        except requests.exceptions.ConnectionError:
            messagebox.showerror("Ошибка", "Не удаётся подключиться к серверу.\nЗапущен ли api_server.py?")
        except Exception as e:
            messagebox.showerror("Ошибка", f"Неизвестная ошибка:\n{e}")

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
